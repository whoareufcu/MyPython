# 字符编码
# 由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，
# 这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。
#
# 但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，
# 所以，中国制定了GB2312编码，用来把中文编进去。
#
# 你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，
# 各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。
#
# 因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。

# 新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。
#
# 所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。
# UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，
# 汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。
# 如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间

# Python的字符串
# 在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：
print('包含中文的str')
# 对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：
print(ord('A'))
print(ord('中'))
print(chr(65))
print(chr(20013))

# 由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。
# 如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。
#
# Python对bytes类型的数据用带b前缀的单引号或双引号表示：
#
# x = b'ABC'
# 要注意区分'ABC'和b'ABC'，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节。
#
# 以Unicode表示的str通过encode()方法可以编码为指定的bytes，例如：
print('ABC'.encode('ascii'))
print('中文'.encode('utf-8'))
# 纯英文的str可以用ASCII编码为bytes，内容是一样的，含有中文的str可以用UTF-8编码为bytes。
# 含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。
# print('中文'.encode('ascii'))

# 在bytes中，无法显示为ASCII字符的字节，用\x##显示。
#
# 反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。
# 要把bytes变为str，就需要用decode()方法：
print(b'ABC'.decode('ascii'))
print(b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8'))
# 如果bytes中包含无法解码的字节，decode()方法会报错：
print(b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore'))
# 如果bytes中只有一小部分无效的字节，可以传入errors='ignore'忽略错误的字节
# 要计算str包含多少个字符，可以用len()函数：
print('str字符数：', len('ABC'))
print('str字符数：', len('中文'))
# len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数：
print('bytes字节数：', len(b'ABC'))
print('bytes字节数：', len(b'\xe4\xb8\xad\xe6\x96\x87'))
print('bytes字节数：', len('中文'.encode('utf-8')))
# 可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。
#
# 在操作字符串时，我们经常遇到str和bytes的互相转换。
# 为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换。

# 在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：
print('Hello,%s' % 'World!')
print('Hi %s,you have $%d' % ('Joe', 10000))
# 在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，
# 后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。
# 常见的占位符有：
#
# 占位符	    替换内容
# %d	    整数
# %f	    浮点数
# %s	    字符串
# %x	    十六进制整数

# 其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：
print('%2d-%02d' % (3, 1))
print('%.2f' % 3.1415926)
# 如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串

# 有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：
print('rate is %d%%' % 7)

# format()
# 另一种格式化字符串的方法是使用字符串的format()方法，
# 它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多：
print('Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125))

# 练习
# 小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，
# 并用字符串格式化显示出'xx.x%'，只保留小数点后1位：
s1 = 72
s2 = 85
r = (s2 - s1) / s1 * 100
print('{0}成绩提升了{1:.1f}%'.format('小明', r))
print('%s成绩提升了%.1f%%' % ('小明', r))

# 小结
# Python 3的字符串使用Unicode，直接支持多语言。
#
# 当str和bytes互相转换时，需要指定编码。最常用的编码是UTF-8。Python当然也支持其他编码方式，比如把Unicode编码成GB2312：
#
# >>> '中文'.encode('gb2312')
# b'\xd6\xd0\xce\xc4'
# 但这种方式纯属自找麻烦，如果没有特殊业务要求，请牢记仅使用UTF-8编码。
#
# 格式化字符串的时候，可以用Python的交互式环境测试，方便快捷。